[{"/home/fullfix/Documents/GitHub/DronePoint/client/src/reportWebVitals.js":"1","/home/fullfix/Documents/GitHub/DronePoint/client/src/index.js":"2","/home/fullfix/Documents/GitHub/DronePoint/client/src/contexts/UserContext.jsx":"3","/home/fullfix/Documents/GitHub/DronePoint/client/src/App.jsx":"4","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/MakeOrder/index.jsx":"5","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/shared/HeaderMenu.jsx":"6","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/shared/DroneMap.jsx":"7","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/MakeOrder/OrderDetails.jsx":"8"},{"size":362,"mtime":1606229592683,"results":"9","hashOfConfig":"10"},{"size":500,"mtime":1606229592683,"results":"11","hashOfConfig":"10"},{"size":1227,"mtime":1607085698289,"results":"12","hashOfConfig":"10"},{"size":1042,"mtime":1607246005629,"results":"13","hashOfConfig":"10"},{"size":2557,"mtime":1607687526016,"results":"14","hashOfConfig":"10"},{"size":456,"mtime":1607247549599,"results":"15","hashOfConfig":"10"},{"size":3532,"mtime":1607526763294,"results":"16","hashOfConfig":"10"},{"size":2840,"mtime":1607687010127,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kfw5bx",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/home/fullfix/Documents/GitHub/DronePoint/client/src/reportWebVitals.js",[],"/home/fullfix/Documents/GitHub/DronePoint/client/src/index.js",[],["40","41"],"/home/fullfix/Documents/GitHub/DronePoint/client/src/contexts/UserContext.jsx",[],"/home/fullfix/Documents/GitHub/DronePoint/client/src/App.jsx",["42","43","44"],"import { Box, Button, Container, createMuiTheme, ThemeProvider, Typography } from '@material-ui/core';\nimport { orange } from '@material-ui/core/colors';\nimport { YMaps } from 'react-yandex-maps';\nimport './App.css';\nimport MakeOrder from './components/MakeOrder';\nimport UserProvider from './contexts/UserContext';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#FF9900',\n      contrastText: '#FFFFFF',\n    },\n  },\n  typography: {\n    fontFamily: [\n      \"'Inter'\",\n    ].join(','),\n    h2: {\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    h3: {\n      fontSize: 18,\n    },\n    h4: {\n      fontSize: 12,\n    }\n  }\n})\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <UserProvider>\n        <YMaps>\n          <Box bgcolor=\"#E5E5E5\">\n            <Container maxWidth=\"sm\">\n              <Box bgcolor=\"white\">\n                <MakeOrder />\n              </Box>\n            </Container>\n          </Box>\n        </YMaps>\n      </UserProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n",["45","46"],"/home/fullfix/Documents/GitHub/DronePoint/client/src/components/MakeOrder/index.jsx",["47","48","49","50","51"],"import { Box, Button, Grid, Input, Typography } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport DroneMap from '../shared/DroneMap';\nimport HeaderMenu from '../shared/HeaderMenu';\nimport OrderDetails from './OrderDetails';\n\nconst MakeOrder = () => {\n    const [placeFrom, setPlaceFrom] = useState(null);\n    const [placeTo, setPlaceTo] = useState(null);\n    const [mapOpen, setMapOpen] = useState(false);\n    const [order, setOrder] = useState(null);\n    const [isOrdering, setIsOrdering] = useState(false);\n\n    useEffect(() => {\n        const makeOrder = async () => {\n            \n        }\n    }, [isOrdering, placeFrom, placeTo]);\n\n    return (\n        <React.Fragment>\n            <DroneMap open={mapOpen} onClose={() => setMapOpen(false)}\n            onSelect={(point, type) => {\n                if (type === 'from') {\n                    setPlaceFrom(point);\n                } else {\n                    setPlaceTo(point);\n                }\n            }}/>\n            <HeaderMenu text={\"Оформить заказ\"}/>\n            <Box height=\"90vh\" padding=\"30px\" position=\"relative\">\n                <Grid container alignItems=\"center\" direction=\"column\"\n                spacing={3}>\n                    <Grid item>\n                        <Box width=\"300px\">\n                            <Typography variant=\"h3\">Маршрут</Typography>\n                            <Button variant=\"text\" fullWidth \n                            onClick={e => setMapOpen('from')}\n                            style={{\n                                border: '1px solid black',\n                                marginTop: 12,\n                                textTransform: 'none',\n                            }}>\n                                {placeFrom?.name || 'Откуда'}\n                            </Button>\n                            <Button variant=\"text\" fullWidth \n                            onClick={e => setMapOpen('to')}\n                            style={{\n                                border: '1px solid black',\n                                marginTop: 12,\n                                textTransform: 'none',\n                            }}>\n                                {placeTo?.name || 'Куда'}\n                            </Button>\n                        </Box>\n                    </Grid>\n                    <OrderDetails placeFrom={placeFrom} placeTo={placeTo} onSubmit={() => {}}/>\n                </Grid>\n            </Box>\n        </React.Fragment>\n    )\n}\n\nexport default MakeOrder\n","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/shared/HeaderMenu.jsx",[],"/home/fullfix/Documents/GitHub/DronePoint/client/src/components/shared/DroneMap.jsx",["52"],"import React, { forwardRef, useState } from 'react';\nimport { Map, Placemark } from 'react-yandex-maps';\nimport { AppBar, Box, Dialog, IconButton, List, ListItem, \n    ListItemIcon, Slide, Toolbar, Typography, ListItemText, Grid, Button } from '@material-ui/core';\nimport { Close as CloseIcon, LocationOn } from '@material-ui/icons';\n\nconst Transition = forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst dronePoints = [\n    {\n        name: 'Москва',\n        pos: [55.684758, 37.738521],\n    },\n    {\n        name: 'Ульяновск',\n        pos: [54.3187, 48.3978],\n    },\n    {\n        name: 'Димитровград',\n        pos: [54.2198, 49.6212],\n    },\n    {\n        name: 'Сочи',\n        pos: [43.6028, 39.7342],\n    },\n    {\n        name: 'Сочи 2',\n        pos: [44.6028, 39.7342],\n    }\n]\n\nconst DroneMap = ({ open, onClose, onSelect }) => {\n    const [selectedPoint, setSelectedPoint] = useState(null);\n    const [coords, setCoords] = useState([55.75, 37.57]);\n    return (\n        <Dialog fullScreen open={!!open} onClose={onClose}\n        TransitionComponent={Transition}>\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={onClose}\n                    aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                    <Typography variant=\"h2\">\n                        Выберите Дрон-пойнт ({ open === 'from' ? 'откуда' : 'куда'})\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid container direction=\"column\">\n                <Grid item>\n                    <Map state={{ center: coords, zoom: 9 }}\n                    className=\"yandex-map\"\n                    width=\"100%\" height=\"67vh\">\n                        {dronePoints.map(point => \n                        <Placemark key={point.name} geometry={point.pos}\n                        options={{ iconColor: point.name === selectedPoint ? 'red' : 'blue' }}/>)}\n                    </Map>\n                </Grid>\n                <Grid item>\n                    <List component=\"nav\" style={{ height: '20vh', overflow: 'auto' }}>\n                        {dronePoints.map(point => \n                        <ListItem button selected={point.name === selectedPoint}\n                        key={point.name}\n                        onClick={() => {\n                            setSelectedPoint(p => p === point.name ? null : point.name);\n                            setCoords(point.pos);\n                        }}>\n                            <ListItemIcon>\n                                <LocationOn color={point.name === selectedPoint ? \n                                'secondary' : 'inherit'}/>\n                            </ListItemIcon>\n                            <ListItemText primary={point.name}/>\n                        </ListItem>)}\n                    </List>\n                </Grid>\n            </Grid>\n            <Button fullWidth variant=\"contained\" color=\"primary\"\n            disabled={!selectedPoint}\n            style={{ position: 'relative', bottom: 0 }}\n            onClick={() => {\n                const point = dronePoints.find(p => p.name === selectedPoint);\n                onSelect(point, open);\n                onClose();\n                setSelectedPoint(null);\n            }}>Выбрать</Button>\n        </Dialog>\n    )\n}\n\nexport default DroneMap\n","/home/fullfix/Documents/GitHub/DronePoint/client/src/components/MakeOrder/OrderDetails.jsx",["53","54"],"import { Box, Button, Grid, Paper, Typography } from '@material-ui/core';\nimport React from 'react';\n\nfunction calcCrow([lat1, lon1], [lat2, lon2]) {\n    var R = 6371; // km\n    var dLat = toRad(lat2-lat1);\n    var dLon = toRad(lon2-lon1);\n    var lat1 = toRad(lat1);\n    var lat2 = toRad(lat2);\n\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    var d = R * c;\n    return d;\n}\n\n// Converts numeric degrees to radians\nfunction toRad(value) {\n    return value * Math.PI / 180;\n}\n\nconst OrderDetails = ({ placeTo, placeFrom, onSubmit }) => {\n    if (!placeFrom || !placeTo) {\n        return (\n            <Typography variant=\"h3\" align=\"center\">\n                Выберите место отправления и досавки, чтобы оформить заказ\n            </Typography>\n        )\n    }\n    const distance = calcCrow(placeFrom.pos, placeTo.pos).toFixed(2);\n    const time = 100;\n    const price = 100;\n    return (\n        <React.Fragment>\n            <Grid item>\n                <Paper elevation={5} placeholder=\"Информация о заказе\">\n                    <Box width=\"380px\" padding={'15px'}>\n                        <Grid container spacing={2} direction=\"column\">\n                            <Grid item>\n                                <Typography variant=\"h2\">Информация о заказе</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography variant=\"h3\">\n                                    {placeFrom.name} {'==>'} {placeTo.name}\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography variant=\"h3\">Расстояние: {distance}km</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography variant=\"h3\">Время: {time}мин</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography variant=\"h3\">Цена: {price}руб</Typography>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Paper>\n            </Grid>\n            <Grid item>\n                <Box width=\"300px\">\n                    <Button variant=\"contained\" color=\"primary\" fullWidth style={{\n                        textTransform: 'none',\n                    }}>\n                        <Typography variant=\"h3\">Заказать</Typography>\n                    </Button>\n                </Box>\n            </Grid>\n        </React.Fragment>\n    )\n}\n\nexport default OrderDetails;\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":15,"nodeType":"61","messageId":"62","endLine":1,"endColumn":21},{"ruleId":"59","severity":1,"message":"63","line":1,"column":65,"nodeType":"61","messageId":"62","endLine":1,"endColumn":75},{"ruleId":"59","severity":1,"message":"64","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":16},{"ruleId":"55","replacedBy":"65"},{"ruleId":"57","replacedBy":"66"},{"ruleId":"59","severity":1,"message":"67","line":1,"column":29,"nodeType":"61","messageId":"62","endLine":1,"endColumn":34},{"ruleId":"59","severity":1,"message":"68","line":11,"column":12,"nodeType":"61","messageId":"62","endLine":11,"endColumn":17},{"ruleId":"59","severity":1,"message":"69","line":11,"column":19,"nodeType":"61","messageId":"62","endLine":11,"endColumn":27},{"ruleId":"59","severity":1,"message":"70","line":12,"column":24,"nodeType":"61","messageId":"62","endLine":12,"endColumn":37},{"ruleId":"59","severity":1,"message":"71","line":15,"column":15,"nodeType":"61","messageId":"62","endLine":15,"endColumn":24},{"ruleId":"59","severity":1,"message":"72","line":3,"column":18,"nodeType":"61","messageId":"62","endLine":3,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":8,"column":9,"nodeType":"61","messageId":"75","endLine":8,"endColumn":13},{"ruleId":"73","severity":1,"message":"76","line":9,"column":9,"nodeType":"61","messageId":"75","endLine":9,"endColumn":13},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'orange' is defined but never used.",["77"],["78"],"'Input' is defined but never used.","'order' is assigned a value but never used.","'setOrder' is assigned a value but never used.","'setIsOrdering' is assigned a value but never used.","'makeOrder' is assigned a value but never used.","'Box' is defined but never used.","no-redeclare","'lat1' is already defined.","redeclared","'lat2' is already defined.","no-global-assign","no-unsafe-negation"]